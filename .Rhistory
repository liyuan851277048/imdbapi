n <- 1000
mean_s <- c(0, 0)
U <- sample(c("A", "B"), size = n, replace = TRUE, prob = c(0.6, 0.4))
Ath <- U %in% c("A")
x <- rnorm(n = 1000, mean = mean_s[1],2)
x[tails] <- rnorm(sum(tails), mean = mean_s[2],10)
require(lattice)
densityplot(~x, par.settings = list(plot.symbol = list(col = factor(y))))
probs <- c(0.5, 0.5)
mu_s <- c(0, 1)
sigma_s <- c(1, 1)
for(i in seq(1000))
{
ps <- matrix(0, ncol = 2, nrow = n)
for(j in seq(2))
{
ps[, j] <- probs[j] * dnorm(x, mean = mu_s[j], sd = sqrt(sigma_s[j]))
}
ps <- ps / rowSums(ps)
for(j in seq(2))
{
sigma_s[j] <- sum( ps[, j] * (x - mu_s[j])^2) / sum(ps[, j])
mu_s[j] <- sum(x * ps[, j]) / sum(ps[, j])
probs[j] <- mean(ps[, j])
}
}
cat(
"sigma:", sqrt(sigma_s), "\n",
"prob:", probs, "\n",
sep = " "
)
n <- 1000
mean_s <- c(0, 0)
U <- sample(c("A", "B"), size = n, replace = TRUE, prob = c(0.6, 0.4))
Ath <- U %in% c("A")
x <- rnorm(n = 1000, mean = mean_s[1],2)
x[tails] <- rnorm(sum(tails), mean = mean_s[2],10)
require(lattice)
densityplot(~x, par.settings = list(plot.symbol = list(col = factor(y))))
probs <- c(0.5, 0.5)
mu_s <- c(0, 1)
sigma_s <- c(1, 1)
for(i in seq(1000))
{
ps <- matrix(0, ncol = 2, nrow = n)
for(j in seq(2))
{
ps[, j] <- probs[j] * dnorm(x, mean = mu_s[j], sd = sqrt(sigma_s[j]))
}
ps <- ps / rowSums(ps)
for(j in seq(2))
{
sigma_s[j] <- sum( ps[, j] * (x - mu_s[j])^2) / sum(ps[, j])
mu_s[j] <- sum(x * ps[, j]) / sum(ps[, j])
probs[j] <- mean(ps[, j])
}
}
n <- 1000
mean_s <- c(0, 0)
y <- sample(c("head", "tail"), size = n, replace = TRUE, prob = c(0.6, 0.4))
x <- rnorm(n = 1000, mean = mean_s[1],2)
tails <- y %in% c("tail")
x[tails] <- rnorm(sum(tails), mean = mean_s[2],10)
require(lattice)
densityplot(~x, par.settings = list(plot.symbol = list(col = factor(y))))
probs <- c(0.5, 0.5)
mu_s <- c(0, 1)
sigma_s <- c(1, 1)
for(i in seq(1000))
{
ps <- matrix(0, ncol = 2, nrow = n)
for(j in seq(2))
{
ps[, j] <- probs[j] * dnorm(x, mean = mu_s[j], sd = sqrt(sigma_s[j]))
}
ps <- ps / rowSums(ps)
for(j in seq(2))
{
sigma_s[j] <- sum( ps[, j] * (x - mu_s[j])^2) / sum(ps[, j])
mu_s[j] <- sum(x * ps[, j]) / sum(ps[, j])
probs[j] <- mean(ps[, j])
}
}
cat(
"sigma:", sqrt(sigma_s), "\n",
"prob:", probs, "\n",
sep = " "
)
ps
probs[j] * dnorm(x, mean = mu_s[j], sd = sqrt(sigma_s[j]))
rowSums(ps)
p
ps <- ps / rowSums(ps)
ps
for(j in seq(2))
{ps[, j] <- probs[j] * dnorm(x, mean = mu_s[j], sd = sqrt(sigma_s[j]))}
ps <- ps / rowSums(ps)
ps
ps[, j]
sum(ps[, j])
ps[, j] * (x)^2
sum( ps[, j] * (x)^2)
dnorm？
dnorm?
)
dnorm(1,0,1)
dnorm(1,0,1)
dnorm(1,0,1)
install.packages("bernor")
install.packages("bernor")
X[i,]
xreal[i,]
xreal[,i]
xreal
xreal*y
y <- matrix(0,n,T);for (i in 1:n) {y[i,]=rbinom(T, 1, prob=p[i,])}
g <- function(x){
return(exp(x)/(exp(x)+1))}
#real
set.seed(1111)
n <- 100
T <- 10
xreal <- matrix(rnorm(n*T),n,T)
timestart <- Sys.time()
#####################simulations
U <- sample(c("A", "B"),size = n,replace = TRUE,prob = c(0.6, 0.4));
Ath <- U %in% c("A");Bth <- !Ath
z <- Ath*rnorm(n,mean = 0, sd = 2)+Bth*rnorm(n,mean = 0, sd = 10)
z <- matrix(rep(z,10),n,T)
p <- g(xreal+z)
y <- matrix(0,n,T);for (i in 1:n) {y[i,]=rbinom(T, 1, prob=p[i,])}
xreal*y
pi1[t+1]=sum(p_forU1[,101:500]) /40000
t=1
p_forU1<- matrix(0,100,500)
U <- matrix(0,100,500);Z <-matrix(0,100,500);Z1 <- matrix(0,100,500);Z2 <- matrix(0,100,500)
U[,1] <- sample(c("A", "B"),size = 100,replace=TRUE,prob=c(pi1[t],1-pi1[t]));
Ath <- U[,1] %in% c("A");Bth <- !Ath
Z1[,1] <- rnorm(n,mean = 0, sd = sigma1[t])#初始化
Z2[,1] <- rnorm(n,mean = 0, sd = sigma2[t])
Z[,1] <- Ath*Z1[,1]+Bth*Z2[,1]
p_forU1[,1] <- 0.5
#gibbs
for(i in 1:100){
for(k in 2:500){
p1 <- g(beta1[t]*xreal[i,]+Z1[i,k-1])#1:10 个x对应的第一组概率
p2 <- g(beta2[t]*xreal[i,]+Z2[i,k-1])#第二组
p_foru_1=pi1[t]*prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
p_foru_2=(1-pi1[t])*prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
p_forU1[i,k]=p_foru_1/(p_foru_1+p_foru_2)
U[i,k]=sample(c("A", "B"),size = 1,replace=TRUE,prob=c(p_forU1[i,k],1-p_forU1[i,k]))
#Z1
znew=rnorm(1,0,sqrt(sigma1[t]))
pnew <- g(beta1[t]*xreal[i,]+znew)
Ac_up=prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down=prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
A=min(1,Ac_up/Ac_down)
if(runif(1)<A){Z1[i,k] <- znew}else{Z1[i,k] <- Z1[i,k-1]}
#z2
znew=rnorm(1,0,sqrt(sigma2[t]))
pnew <- g(beta2[t]*xreal[i,]+znew)
Ac_up <- prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down <- prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
(A=min(1,Ac_up/Ac_down))
if(runif(1)<A){Z2[i,k] <- znew}else{Z2[i,k] <- Z2[i,k-1]}
#Z
if(U[i,k]=="A"){Z[i,k]=Z1[i,k]}else{Z[i,k]=Z2[i,k]}
}#k
}#i,U-100*500,Z-100*500
sum(p_forU1[,101:500]) /40000
sum(p_forU1[,101:500]*Z[,101:500]^2)/sum(p_forU1[,101:500])
sum((1-p_forU1[,101:500])*Z[,101:500]^2)/sum(1-p_forU1[,101:500] )
k=101
i=1
sum(xreal[i,]*y[i,]-g(beta1[t]*xreal[i,]+Z[i,k])*X[i,])
sum(xreal[i,]*y[i,]-g(beta1[t]*xreal[i,]+Z[i,k])*xreal[i,])
p_forU1[i,k]*sum(xreal[i,]*y[i,]-g(beta1[t]*xreal[i,]+Z[i,k])*xreal[i,])
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
}
beta1[t+1]
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
beta1[t+1]
beta1[t]
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta_num
#beta1
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
beta1[t+1]
#beta1
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
beta1[t+1]
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta2[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+(1-p_forU1[i,k])*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+(1-p_forU1[i,k])*sum((-xreal[i,]^2*gg)^2)
}}
beta2[t+1] <- beta2[t]+sum(beta_num)/sum(-beta_den)
beta2[t+1]
g <- function(x){
return(exp(x)/(exp(x)+1))}
#real
set.seed(1111)
n <- 100
T <- 10
xreal <- matrix(rnorm(n*T),n,T)
timestart <- Sys.time()
#####################simulations
U <- sample(c("A", "B"),size = n,replace = TRUE,prob = c(0.6, 0.4));
Ath <- U %in% c("A");Bth <- !Ath
z <- Ath*rnorm(n,mean = 0, sd = 2)+Bth*rnorm(n,mean = 0, sd = 10)
z <- matrix(rep(z,10),n,T)
p <- g(xreal+z)
y <- matrix(0,n,T);for (i in 1:n) {y[i,]=rbinom(T, 1, prob=p[i,])}
##################储存参数
TS <- 10
pi1 <- numeric (TS)
beta1 <- rep(0,TS)
beta2 <- rep(0,TS)
sigma1 <- numeric (TS)
sigma2 <- numeric (TS)
zmean <- numeric (TS)
############给定初值
beta1[1]=1
beta2[1]=1
sigma1[1]=3
sigma2[1]=7
pi1[1]=0.5
###############
for(t in 1:(TS-1)){
p_forU1<- matrix(0,100,500)
U <- matrix(0,100,500);Z <-matrix(0,100,500);Z1 <- matrix(0,100,500);Z2 <- matrix(0,100,500)
U[,1] <- sample(c("A", "B"),size = 100,replace=TRUE,prob=c(pi1[t],1-pi1[t]));
Ath <- U[,1] %in% c("A");Bth <- !Ath
Z1[,1] <- rnorm(n,mean = 0, sd = sigma1[t])#初始化
Z2[,1] <- rnorm(n,mean = 0, sd = sigma2[t])
Z[,1] <- Ath*Z1[,1]+Bth*Z2[,1]
p_forU1[,1] <- 0.5
#gibbs
for(i in 1:100){
for(k in 2:500){
p1 <- g(beta1[t]*xreal[i,]+Z1[i,k-1])#1:10 个x对应的第一组概率
p2 <- g(beta2[t]*xreal[i,]+Z2[i,k-1])#第二组
p_foru_1=pi1[t]*prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
p_foru_2=(1-pi1[t])*prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
p_forU1[i,k]=p_foru_1/(p_foru_1+p_foru_2)
U[i,k]=sample(c("A", "B"),size = 1,replace=TRUE,prob=c(p_forU1[i,k],1-p_forU1[i,k]))
#Z1
znew=rnorm(1,0,sqrt(sigma1[t]))
pnew <- g(beta1[t]*xreal[i,]+znew)
Ac_up=prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down=prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
A=min(1,Ac_up/Ac_down)
if(runif(1)<A){Z1[i,k] <- znew}else{Z1[i,k] <- Z1[i,k-1]}
#z2
znew=rnorm(1,0,sqrt(sigma2[t]))
pnew <- g(beta2[t]*xreal[i,]+znew)
Ac_up <- prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down <- prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
(A=min(1,Ac_up/Ac_down))
if(runif(1)<A){Z2[i,k] <- znew}else{Z2[i,k] <- Z2[i,k-1]}
#Z
if(U[i,k]=="A"){Z[i,k]=Z1[i,k]}else{Z[i,k]=Z2[i,k]}
}#k
}#i,U-100*500,Z-100*500
pi1[t+1]=sum(p_forU1[,101:500]) /40000
sigma1[t+1]=sum(p_forU1[,101:500]*Z[,101:500]^2)/sum(p_forU1[,101:500])
sigma2[t+1]=sum((1-p_forU1[,101:500])*Z[,101:500]^2)/sum(1-p_forU1[,101:500] )
#beta1
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
##beta2
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta2[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+(1-p_forU1[i,k])*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+(1-p_forU1[i,k])*sum((-xreal[i,]^2*gg)^2)
}}
beta2[t+1] <- beta2[t]+sum(beta_num)/sum(-beta_den)
}
}#t
plot(pi1)
windows()
plot(sigma1,col="red",lty=2)
windows(2)
plot(sigma2,col="blue",lty=2)
timeend <- Sys.time()
timeend-timestart
g <- function(x){
return(exp(x)/(exp(x)+1))}
#real
set.seed(1111)
n <- 100
T <- 10
xreal <- matrix(rnorm(n*T),n,T)
timestart <- Sys.time()
#####################simulations
U <- sample(c("A", "B"),size = n,replace = TRUE,prob = c(0.6, 0.4));
Ath <- U %in% c("A");Bth <- !Ath
z <- Ath*rnorm(n,mean = 0, sd = 2)+Bth*rnorm(n,mean = 0, sd = 10)
z <- matrix(rep(z,10),n,T)
p <- g(xreal+z)
y <- matrix(0,n,T);for (i in 1:n) {y[i,]=rbinom(T, 1, prob=p[i,])}
##################储存参数
TS <- 100
pi1 <- numeric (TS)
beta1 <- rep(0,TS)
beta2 <- rep(0,TS)
sigma1 <- numeric (TS)
sigma2 <- numeric (TS)
zmean <- numeric (TS)
############给定初值
beta1[1]=1
beta2[1]=1
sigma1[1]=3
sigma2[1]=7
pi1[1]=0.5
###############
for(t in 1:(TS-1)){
p_forU1<- matrix(0,100,500)
U <- matrix(0,100,500);Z <-matrix(0,100,500);Z1 <- matrix(0,100,500);Z2 <- matrix(0,100,500)
U[,1] <- sample(c("A", "B"),size = 100,replace=TRUE,prob=c(pi1[t],1-pi1[t]));
Ath <- U[,1] %in% c("A");Bth <- !Ath
Z1[,1] <- rnorm(n,mean = 0, sd = sigma1[t])#初始化
Z2[,1] <- rnorm(n,mean = 0, sd = sigma2[t])
Z[,1] <- Ath*Z1[,1]+Bth*Z2[,1]
p_forU1[,1] <- 0.5
#gibbs
for(i in 1:100){
for(k in 2:500){
p1 <- g(beta1[t]*xreal[i,]+Z1[i,k-1])#1:10 个x对应的第一组概率
p2 <- g(beta2[t]*xreal[i,]+Z2[i,k-1])#第二组
p_foru_1=pi1[t]*prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
p_foru_2=(1-pi1[t])*prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
p_forU1[i,k]=p_foru_1/(p_foru_1+p_foru_2)
U[i,k]=sample(c("A", "B"),size = 1,replace=TRUE,prob=c(p_forU1[i,k],1-p_forU1[i,k]))
#Z1
znew=rnorm(1,0,sqrt(sigma1[t]))
pnew <- g(beta1[t]*xreal[i,]+znew)
Ac_up=prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down=prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
A=min(1,Ac_up/Ac_down)
if(runif(1)<A){Z1[i,k] <- znew}else{Z1[i,k] <- Z1[i,k-1]}
#z2
znew=rnorm(1,0,sqrt(sigma2[t]))
pnew <- g(beta2[t]*xreal[i,]+znew)
Ac_up <- prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
Ac_down <- prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
(A=min(1,Ac_up/Ac_down))
if(runif(1)<A){Z2[i,k] <- znew}else{Z2[i,k] <- Z2[i,k-1]}
#Z
if(U[i,k]=="A"){Z[i,k]=Z1[i,k]}else{Z[i,k]=Z2[i,k]}
}#k
}#i,U-100*500,Z-100*500
pi1[t+1]=sum(p_forU1[,101:500]) /40000
sigma1[t+1]=sum(p_forU1[,101:500]*Z[,101:500]^2)/sum(p_forU1[,101:500])
sigma2[t+1]=sum((1-p_forU1[,101:500])*Z[,101:500]^2)/sum(1-p_forU1[,101:500] )
#beta1
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta1[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
}}
beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
##beta2
beta_num <- rep(0,500)
beta_den <- rep(0,500)
for (k in 101:500){
for (i in 1:100){
gg=g(beta2[t]*xreal[i,]+Z[i,k])
beta_num[i]=beta_num[i]+(1-p_forU1[i,k])*sum(xreal[i,]*y[i,]-gg*xreal[i,])
beta_den[i]=beta_den[i]+(1-p_forU1[i,k])*sum((-xreal[i,]^2*gg)^2)
}}
beta2[t+1] <- beta2[t]+sum(beta_num)/sum(-beta_den)
}
}#t
plot(pi1)
windows()
plot(sigma1,col="red",lty=2)
windows(2)
plot(sigma2,col="blue",lty=2)
timeend <- Sys.time()
timeend-timestart
plot(bata1)
plot(bata1)
plot(beta1)
beta1
exp(0:-100)
exp(0:-100)*2
plog(exp(0:-100)*2)
plot(exp(0:-100)*2)
a=exp(0:-100)*2
a[5]=-2.3
plot(a)
a=a+1
plot(a)
a[1]=2
a[5]=0.4
plot(a)
a[5]=0.9
plot(a)
b=rnorm(100,0,0.1)
plot(b)
b=rnorm(100,0,0.06)
plot(b)
b=rnorm(100,0,0.006)
plot(b)
plot(a+b)
b=rnorm(101,0,0.006)
plot(a+b)
b[1:30]=rnorm(30,0,0.06)
plot(a+b)
b[1:30]=rnorm(30,0,0.01)
plot(a+b)
b[1:30]=rnorm(30,0,0.02)
plot(a+b)
plot(a+b-1)
plot((a+b-1)/10+0.5)
plot((a+b-1)/10+0.4)
plot((a+b-1+rnorm(30,0,0.02))/10+0.4)
line(y=0.4)
line(y=0.4,x=0:100)
lines(y=0.4,x=0:100)
lines(y=0.4)
lines(x=c(0,100),y=0.4)
lines(x=c(0,100),y=c(0.4,0.4))
plot(g(0:100))
plot(g((-10:30)/10)
)
plot(g((-10:90)/10)
)
plot(g((-10:90)/10)*10)
plot(g((-10:90)/10))
plot(g((-10:90)/10)*3+7)
plot(g((-10:90)/10)*3+7+rnorm(101,0,0.02)))
plot(g((-10:90)/10)*3+7+rnorm(101,0,0.02))
plot(g((-10:90)/10)*3+7+rnorm(101,0,0.02))
a=g((-10:90)/10)*3+7+rnorm(101,0,0.02)
a[2:11]=c(8.0,8.2,8.9,8.0,8.4,8.7,8.9,9.0,9.1,9.2)
plot(a)
a[12:22]=(a[12:22]-a[12])/3+a[12]
plot(a)
a[12:22]=a[12:22]+1
plot(a)
a[12:22]=a[12:22]-0.3
plot(a)
lines(x=c(0,100),y=c(10,10))
lines(x=c(0,100),y=c(10,10),col='blue')
lines(x=c(0,100),y=c(10,10),col='red')
lines(x=c(0,100),y=c(10,10),col='red')
plot(a)
a[23]=a[23+0.2]
plot(a)
a[23]=a[23]+0.2
plot(a)
a[24]=a[24]+0.18
a[25]=a[25]+0.1
plot(a)
lines(x=c(0,100),y=c(10,10),col='red')
