g <- function(x){
  return(exp(x)/(exp(x)+1))}
#real
set.seed(1111)
n <- 100
T <- 10
xreal <- matrix(rnorm(n*T),n,T)
timestart <- Sys.time()
#####################simulations 
U <- sample(c("A", "B"),size = n,replace = TRUE,prob = c(0.6, 0.4));
Ath <- U %in% c("A");Bth <- !Ath
z <- Ath*rnorm(n,mean = 0, sd = 2)+Bth*rnorm(n,mean = 0, sd = 10)
z <- matrix(rep(z,10),n,T)
p <- g(xreal+z)
y <- matrix(0,n,T);for (i in 1:n) {y[i,]=rbinom(T, 1, prob=p[i,])}
##################储存参数
TS <- 100
pi1 <- numeric (TS)
beta1 <- rep(0,TS)
beta2 <- rep(0,TS)
sigma1 <- numeric (TS)
sigma2 <- numeric (TS)
zmean <- numeric (TS)

############给定初值
beta1[1]=2
beta2[1]=2
sigma1[1]=3
sigma2[1]=7
pi1[1]=0.5
###############

for(t in 1:(TS-1)){
  p_forU1<- matrix(0,100,500)
  U <- matrix(0,100,500);Z <-matrix(0,100,500);Z1 <- matrix(0,100,500);Z2 <- matrix(0,100,500)
  U[,1] <- sample(c("A", "B"),size = 100,replace=TRUE,prob=c(pi1[t],1-pi1[t]));
  Ath <- U[,1] %in% c("A");Bth <- !Ath
  Z1[,1] <- rnorm(n,mean = 0, sd = sigma1[t])#初始化
  Z2[,1] <- rnorm(n,mean = 0, sd = sigma2[t])
  Z[,1] <- Ath*Z1[,1]+Bth*Z2[,1]
  p_forU1[,1] <- 0.5
  #gibbs
  for(i in 1:100){
    for(k in 2:500){
      
      p1 <- g(beta1[t]*xreal[i,]+Z1[i,k-1])#1:10 个x对应的第一组概率
      p2 <- g(beta2[t]*xreal[i,]+Z2[i,k-1])#第二组
      p_foru_1=pi1[t]*prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
      p_foru_2=(1-pi1[t])*prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
      p_forU1[i,k]=p_foru_1/(p_foru_1+p_foru_2)
      
      U[i,k]=sample(c("A", "B"),size = 1,replace=TRUE,prob=c(p_forU1[i,k],1-p_forU1[i,k]))
      #Z1
      znew=rnorm(1,0,sqrt(sigma1[t]))
      pnew <- g(beta1[t]*xreal[i,]+znew)
      Ac_up=prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
      Ac_down=prod((p1)^y[i,]*(1-p1)^(1-y[i,]))
      A=min(1,Ac_up/Ac_down)
      if(runif(1)<A){Z1[i,k] <- znew}else{Z1[i,k] <- Z1[i,k-1]}
      #z2
      znew=rnorm(1,0,sqrt(sigma2[t]))
      pnew <- g(beta2[t]*xreal[i,]+znew)
      Ac_up <- prod((pnew)^y[i,]*(1-pnew)^(1-y[i,]))
      Ac_down <- prod((p2)^y[i,]*(1-p2)^(1-y[i,]))
      (A=min(1,Ac_up/Ac_down))
      if(runif(1)<A){Z2[i,k] <- znew}else{Z2[i,k] <- Z2[i,k-1]}
      
      #Z
      if(U[i,k]=="A"){Z[i,k]=Z1[i,k]}else{Z[i,k]=Z2[i,k]}
      
      
    }#k
  }#i,U-100*500,Z-100*500
  

  pi1[t+1]=sum(p_forU1[,101:500]) /40000
  
  sigma1[t+1]=sum(p_forU1[,101:500]*Z[,101:500]^2)/sum(p_forU1[,101:500])
  sigma2[t+1]=sum((1-p_forU1[,101:500])*Z[,101:500]^2)/sum(1-p_forU1[,101:500] )
  
  
  #beta1
  beta_num <- rep(0,500)
  beta_den <- rep(0,500)
  for (k in 101:500){
    for (i in 1:100){
      gg=g(beta1[t]*xreal[i,]+Z[i,k])
      beta_num[i]=beta_num[i]+p_forU1[i,k]*sum(xreal[i,]*y[i,]-gg*xreal[i,])
      beta_den[i]=beta_den[i]+p_forU1[i,k]*sum((-xreal[i,]^2*gg)^2)
    }}
    beta1[t+1] <- beta1[t]+sum(beta_num)/sum(-beta_den)
  
  ##beta2
    beta_num <- rep(0,500)
    beta_den <- rep(0,500)
    for (k in 101:500){
      for (i in 1:100){
        gg=g(beta2[t]*xreal[i,]+Z[i,k])
        beta_num[i]=beta_num[i]+(1-p_forU1[i,k])*sum(xreal[i,]*y[i,]-gg*xreal[i,])
        beta_den[i]=beta_den[i]+(1-p_forU1[i,k])*sum((-xreal[i,]^2*gg)^2)
      }}
    beta2[t+1] <- beta2[t]+sum(beta_num)/sum(-beta_den)
}

  
  
  
}#t
plot(pi1)
windows()
plot(sigma1,col="red",lty=2)
windows(2)
plot(sigma2,col="blue",lty=2)
plot(beta1)
timeend <- Sys.time()
timeend-timestart
